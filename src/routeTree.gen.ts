/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from "@tanstack/react-router";

import { Route as rootRouteImport } from "./routes/__root";
import { Route as TestRouteImport } from "./routes/test";
import { Route as ShopRouteImport } from "./routes/shop";
import { Route as AboutRouteImport } from "./routes/about";
import { Route as DynamicRouteImport } from "./routes/$dynamic";

const IndexLazyRouteImport = createFileRoute("/")();

const TestRoute = TestRouteImport.update({
  id: "/test",
  path: "/test",
  getParentRoute: () => rootRouteImport,
} as any);
const ShopRoute = ShopRouteImport.update({
  id: "/shop",
  path: "/shop",
  getParentRoute: () => rootRouteImport,
} as any);
const AboutRoute = AboutRouteImport.update({
  id: "/about",
  path: "/about",
  getParentRoute: () => rootRouteImport,
} as any);
const DynamicRoute = DynamicRouteImport.update({
  id: "/$dynamic",
  path: "/$dynamic",
  getParentRoute: () => rootRouteImport,
} as any);
const IndexLazyRoute = IndexLazyRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import("./routes/index.lazy").then((d) => d.Route));

export interface FileRoutesByFullPath {
  "/": typeof IndexLazyRoute;
  "/$dynamic": typeof DynamicRoute;
  "/about": typeof AboutRoute;
  "/shop": typeof ShopRoute;
  "/test": typeof TestRoute;
}
export interface FileRoutesByTo {
  "/": typeof IndexLazyRoute;
  "/$dynamic": typeof DynamicRoute;
  "/about": typeof AboutRoute;
  "/shop": typeof ShopRoute;
  "/test": typeof TestRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  "/": typeof IndexLazyRoute;
  "/$dynamic": typeof DynamicRoute;
  "/about": typeof AboutRoute;
  "/shop": typeof ShopRoute;
  "/test": typeof TestRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/" | "/$dynamic" | "/about" | "/shop" | "/test";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "/$dynamic" | "/about" | "/shop" | "/test";
  id: "__root__" | "/" | "/$dynamic" | "/about" | "/shop" | "/test";
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute;
  DynamicRoute: typeof DynamicRoute;
  AboutRoute: typeof AboutRoute;
  ShopRoute: typeof ShopRoute;
  TestRoute: typeof TestRoute;
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/test": {
      id: "/test";
      path: "/test";
      fullPath: "/test";
      preLoaderRoute: typeof TestRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/shop": {
      id: "/shop";
      path: "/shop";
      fullPath: "/shop";
      preLoaderRoute: typeof ShopRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/about": {
      id: "/about";
      path: "/about";
      fullPath: "/about";
      preLoaderRoute: typeof AboutRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/$dynamic": {
      id: "/$dynamic";
      path: "/$dynamic";
      fullPath: "/$dynamic";
      preLoaderRoute: typeof DynamicRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexLazyRouteImport;
      parentRoute: typeof rootRouteImport;
    };
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  DynamicRoute: DynamicRoute,
  AboutRoute: AboutRoute,
  ShopRoute: ShopRoute,
  TestRoute: TestRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
