/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as TestRouteImport } from './routes/test'
import { Route as ProductiontableRouteImport } from './routes/productiontable'
import { Route as PhaseOutGameRouteImport } from './routes/phase-out-game'
import { Route as MapRouteImport } from './routes/map'
import { Route as AboutRouteImport } from './routes/about'
import { Route as DynamicRouteImport } from './routes/$dynamic'

const IndexLazyRouteImport = createFileRoute('/')()

const TestRoute = TestRouteImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductiontableRoute = ProductiontableRouteImport.update({
  id: '/productiontable',
  path: '/productiontable',
  getParentRoute: () => rootRouteImport,
} as any)
const PhaseOutGameRoute = PhaseOutGameRouteImport.update({
  id: '/phase-out-game',
  path: '/phase-out-game',
  getParentRoute: () => rootRouteImport,
} as any)
const MapRoute = MapRouteImport.update({
  id: '/map',
  path: '/map',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const DynamicRoute = DynamicRouteImport.update({
  id: '/$dynamic',
  path: '/$dynamic',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexLazyRoute = IndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/$dynamic': typeof DynamicRoute
  '/about': typeof AboutRoute
  '/map': typeof MapRoute
  '/phase-out-game': typeof PhaseOutGameRoute
  '/productiontable': typeof ProductiontableRoute
  '/test': typeof TestRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/$dynamic': typeof DynamicRoute
  '/about': typeof AboutRoute
  '/map': typeof MapRoute
  '/phase-out-game': typeof PhaseOutGameRoute
  '/productiontable': typeof ProductiontableRoute
  '/test': typeof TestRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexLazyRoute
  '/$dynamic': typeof DynamicRoute
  '/about': typeof AboutRoute
  '/map': typeof MapRoute
  '/phase-out-game': typeof PhaseOutGameRoute
  '/productiontable': typeof ProductiontableRoute
  '/test': typeof TestRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$dynamic'
    | '/about'
    | '/map'
    | '/phase-out-game'
    | '/productiontable'
    | '/test'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$dynamic'
    | '/about'
    | '/map'
    | '/phase-out-game'
    | '/productiontable'
    | '/test'
  id:
    | '__root__'
    | '/'
    | '/$dynamic'
    | '/about'
    | '/map'
    | '/phase-out-game'
    | '/productiontable'
    | '/test'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  DynamicRoute: typeof DynamicRoute
  AboutRoute: typeof AboutRoute
  MapRoute: typeof MapRoute
  PhaseOutGameRoute: typeof PhaseOutGameRoute
  ProductiontableRoute: typeof ProductiontableRoute
  TestRoute: typeof TestRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/productiontable': {
      id: '/productiontable'
      path: '/productiontable'
      fullPath: '/productiontable'
      preLoaderRoute: typeof ProductiontableRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/phase-out-game': {
      id: '/phase-out-game'
      path: '/phase-out-game'
      fullPath: '/phase-out-game'
      preLoaderRoute: typeof PhaseOutGameRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/map': {
      id: '/map'
      path: '/map'
      fullPath: '/map'
      preLoaderRoute: typeof MapRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$dynamic': {
      id: '/$dynamic'
      path: '/$dynamic'
      fullPath: '/$dynamic'
      preLoaderRoute: typeof DynamicRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  DynamicRoute: DynamicRoute,
  AboutRoute: AboutRoute,
  MapRoute: MapRoute,
  PhaseOutGameRoute: PhaseOutGameRoute,
  ProductiontableRoute: ProductiontableRoute,
  TestRoute: TestRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
